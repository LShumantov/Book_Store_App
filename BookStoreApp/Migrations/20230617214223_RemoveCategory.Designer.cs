// <auto-generated />
using BookStoreApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStoreApp.Migrations
{
    [DbContext(typeof(DataContex))]
    [Migration("20230617214223_RemoveCategory")]
    partial class RemoveCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStoreApp.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookStoreApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookStoreApp.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookStoreApp.Models.ShoppingBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingBaskets");
                });

            modelBuilder.Entity("BookStoreApp.Models.ShoppingBasketBook", b =>
                {
                    b.Property<int>("ShopingBasketId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ShopingBasketId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("ShoppingBasketBooks");
                });

            modelBuilder.Entity("BookStoreApp.Models.WareHouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("BookStoreApp.Models.WareHouseBook", b =>
                {
                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("WareHouseId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("WareHouseBooks");
                });

            modelBuilder.Entity("BookStoreApp.Models.Book", b =>
                {
                    b.HasOne("BookStoreApp.Models.Author", "Autor")
                        .WithMany("Books")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("BookStoreApp.Models.ShoppingBasket", b =>
                {
                    b.HasOne("BookStoreApp.Models.Customer", "Customer")
                        .WithMany("ShoppingBaskets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStoreApp.Models.ShoppingBasketBook", b =>
                {
                    b.HasOne("BookStoreApp.Models.Book", "Book")
                        .WithMany("ShoppingBasketBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreApp.Models.ShoppingBasket", "ShoppingBasket")
                        .WithMany("ShoppingBasketBooks")
                        .HasForeignKey("ShopingBasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ShoppingBasket");
                });

            modelBuilder.Entity("BookStoreApp.Models.WareHouseBook", b =>
                {
                    b.HasOne("BookStoreApp.Models.Book", "Book")
                        .WithMany("WareHouseBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreApp.Models.WareHouse", "WareHouse")
                        .WithMany("WareHouseBooks")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("BookStoreApp.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStoreApp.Models.Book", b =>
                {
                    b.Navigation("ShoppingBasketBooks");

                    b.Navigation("WareHouseBooks");
                });

            modelBuilder.Entity("BookStoreApp.Models.Customer", b =>
                {
                    b.Navigation("ShoppingBaskets");
                });

            modelBuilder.Entity("BookStoreApp.Models.ShoppingBasket", b =>
                {
                    b.Navigation("ShoppingBasketBooks");
                });

            modelBuilder.Entity("BookStoreApp.Models.WareHouse", b =>
                {
                    b.Navigation("WareHouseBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
